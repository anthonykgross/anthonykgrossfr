version: '1.0'
steps:
    build_the_testing_image:
        type: build
        title: Builds my service for testing
        dockerfile: docker/images/Dockerfile
        image_name: anthonykgross/anthonykgrossfr
        tag: ${{CF_BRANCH}}

    unit_test:
        type: composition
        title: Run unit tests
        working_directory: ${{main_clone}}
        composition:
            version: '2'
            services:
                mysql:
                    image: mysql:5.7
                    ports:
                        - 3306
                    environment:
                        MYSQL_DATABASE: $MYSQL_DATABASE
                        MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD

        composition_candidates:
            test:
                image: ${{build_the_testing_image}}
                links:
                    - mysql:mysql
                command: bash -c 'sleep 30 && cp -f .env.test .env && php bin/console doctrine:schema:update --force --env=test && /entrypoint.sh tests'

        composition_variables:
            - MYSQL_ROOT_PASSWORD=root
            - MYSQL_DATABASE=anthonykgrossfr_test

    build_the_image:
        type: build
        title: Builds my service
        dockerfile: docker/images/Dockerfile
        image_name: anthonykgross/anthonykgrossfr
        no_cache: true
        no_cf_cache: true
        tag: ${{CF_BRANCH}}
        build_arguments:
            - APPLICATION_ENV=prod
            - MAILER_USER=${{MAILER_USER}}
            - MAILER_PASSWORD=${{MAILER_PASSWORD}}
            - DB_USER=${{DB_USER}}
            - DB_PASSWORD=${{DB_PASSWORD}}
            - DB_HOST=${{DB_HOST}}
            - DB_NAME=${{DB_NAME}}
            - CLOUDFLARE_KEY=${{CLOUDFLARE_KEY}}
            - CLOUDFLARE_ZONE=${{CLOUDFLARE_ZONE}}
            - ALGOLIA_APP_ID=${{ALGOLIA_APP_ID}}
            - ALGOLIA_ADMIN_KEY=${{ALGOLIA_ADMIN_KEY}}
            - ALGOLIA_API_KEY=${{ALGOLIA_API_KEY}}
            - ADMIN_USER=${{ADMIN_USER}}
            - ADMIN_SHA512_PASSWORD=${{ADMIN_SHA512_PASSWORD}}
        when:
            branch:
                only: [ master ]

    deploy:
        title: Deployment
        image: cdrx/rancher-gitlab-deploy
        commands:
            - upgrade --environment ${{RANCHER_ENV}} --stack ${{RANCHER_STACK}} --service ${{RANCHER_SERVICE}} --no-start-before-stopping --no-wait-for-upgrade-to-finish
        when:
            branch:
                only: [ master ]
